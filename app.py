# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gLSEP3wRgJqndJgxrnICljluRL07H7-0
"""
import streamlit as st
import pandas as pd
import datetime
import sys
import os

st.set_page_config(page_title="Sales Forecasting App", layout="centered")
st.title("ðŸ“ˆ Sales Forecasting App")

from forecasting import (
    recursive_forecast, arima_forecast, sarimax_forecast, prophet_forecast,
    prophet_data_formatter, plot_model_forecast, model_params,
    download_entity_data, training_data_processor, model_mapes
)

# --- Step 1: User Input ---

entity = st.selectbox("Select Region", ["Company", "Region 1", "Region 2", "Region 3", "Region 4"])
target_choice = st.selectbox("Select Forecast Target", ["Sales", "Orders"])
model_choice = st.selectbox("Select Forecasting Model", ["Linear Regression", "XGBoost", "ARIMA", "SARIMAX", "Prophet"])
m_steps = st.slider("Select Forecast Horizon (in days)", min_value=7, max_value=60, value=30, step=1)


# --- Step 2: Load Entity-Specific Data ---
ts_data, exog_data = download_entity_data(entity)

# --- Step 3: Run Forecast ---
if st.button("Run Forecast"):
    test_size = m_steps  # Forecast horizon

    if model_choice in ["Linear Regression", "XGBoost"]:
        ts_proc = training_data_processor(ts_data.copy(), target_col=target_choice)
        exog_pred = exog_data.head(m_steps)
        model_flag = 'lr' if model_choice == "Linear Regression" else 'xgb'
        forecast = recursive_forecast(ts_proc, exog_pred, model=model_flag, target_col=target_choice)

    elif model_choice == "ARIMA":
        forecast = arima_forecast(
            ts_data.copy(), 
            m_steps, 
            model_params[entity]['arima_order'], 
            target_col=target_choice
            )
        
    elif model_choice == "SARIMAX":
        ts_proc = training_data_processor(ts_data.copy(), target_col=target_choice)
        exog_train = ts_proc[["Holiday", "Discounted Stores"]]
        exog_pred = exog_data[["Holiday", "Discounted Stores"]].head(m_steps)
        forecast = sarimax_forecast(
            ts_proc,
            m_steps,
            exog_train,
            exog_pred,
            model_params[entity]['sarimax_order'],
            model_params[entity]['seasonal_order'],
            target_col=target_choice
            )


    elif model_choice == "Prophet":
        prophet_exog_cols = ["Holiday", "Discounted Stores"]
        df_prophet = prophet_data_formatter(ts_data.copy(), is_inference=False)
        exog_pred = prophet_data_formatter(exog_data.head(m_steps), is_inference=True)
        forecast = prophet_forecast(df_prophet, m_steps, exog_pred, target_col=target_choice)  # Pass target_col

    # --- Step 4: Plot Forecast ---
    plot_model_forecast(
        ts_data.copy(), forecast, model_name=model_choice, inf_label=entity, target_col=target_choice
    )

    # --- Step 4.1: Calculate and Display MAPE ---
    # Display MAPE message based on selections
    key = (entity, target_choice, model_choice)
    if target_choice == "Sales":
        mape_value = model_mapes.get(key)
        if mape_value:
            st.info(f" Test MAPE for {model_choice} model on {entity} {target_choice}: {mape_value}")
        else:
            st.info("MAPE not available for this selection.")
    elif target_choice == "Orders":
        mape_sales_key = (entity, "Sales", model_choice)
        mape_value = model_mapes.get(mape_sales_key)
        if mape_value:
            st.info(f"Orders forecasts are untested. Model had a MAPE of {mape_value} on Sales for this segment.")
        else:
            st.info("Orders forecasts are untested. No Sales MAPE is available for this segment/model.")

    # --- Step 5: Show Forecast Table and Download Option ---
    st.dataframe(forecast)  # Show the forecast table

    csv = forecast.to_csv().encode('utf-8')
    st.download_button("Download Forecast as CSV", data=csv, file_name="forecast.csv", mime="text/csv")

    st.success("Forecasting Complete âœ…")

