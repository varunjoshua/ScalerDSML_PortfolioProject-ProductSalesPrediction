# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gLSEP3wRgJqndJgxrnICljluRL07H7-0
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import datetime

# Import all functions and model parameters from company_forecasting.py
from forecasting import (
    recursive_forecast, arima_forecast, sarimax_forecast, prophet_forecast,
    inference_data_processor, inference_exog_processor, prophet_data_formatter,
    plot_model_forecast, model_params
)

st.set_page_config(page_title="Sales Forecasting App", layout="centered")
st.title("ðŸ“ˆ Sales Forecasting App")

# --- Step 1: Select entity and model ---
entity = st.selectbox("Select Entity", ["Company", "Region 1", "Region 2", "Region 3", "Region 4"])
model_choice = st.selectbox("Select Forecasting Model", ["Linear Regression", "ARIMA", "SARIMAX", "Prophet"])
m_steps = st.slider("Select Forecast Horizon (in days)", min_value=7, max_value=60, value=30, step=1)

# --- Step 2: Placeholder for loading data ---
st.subheader("Upload Time Series and Exogenous Data")
ts_file = st.file_uploader("Upload Time Series CSV", type=["csv"])
exog_file = st.file_uploader("Upload Exogenous CSV (if applicable)", type=["csv"])

if st.button("Run Forecast"):
    if ts_file is None:
        st.warning("Please upload a time series CSV file.")
        st.stop()

    ts_data = pd.read_csv(ts_file, parse_dates=[0], index_col=0)
    exog_data = pd.read_csv(exog_file, parse_dates=[0], index_col=0) if exog_file else None

    test_size = m_steps  # assuming same as forecast horizon

    if model_choice == "Linear Regression":
        ts_proc, exog_proc, exog_pred = inference_data_processor(ts_data.copy(), m_steps)
        forecast = recursive_forecast(ts_proc, test_size, m_steps, exog_proc, exog_pred)

    elif model_choice == "ARIMA":
        forecast = arima_forecast(ts_data.copy(), test_size, m_steps, model_params[entity]['arima_order'])

    elif model_choice == "SARIMAX":
        exog_proc, exog_pred = inference_exog_processor(exog_data.copy(), m_steps)
        forecast = sarimax_forecast(ts_data.copy(), test_size, m_steps, exog_proc, exog_pred,
                                    model_params[entity]['sarimax_order'], model_params[entity]['seasonal_order'])

    elif model_choice == "Prophet":
        df_prophet, exog_pred = prophet_data_formatter(ts_data.copy(), exog_data.copy(), m_steps)
        forecast = prophet_forecast(df_prophet, test_size, m_steps, exog_pred)

    # --- Step 3: Plot ---
    plot_model_forecast(ts_data.copy(), forecast)

    st.success("Forecasting Complete âœ…")